import mongoose from 'mongoose';
import orderModel from '../models/orderModel.js'; // Import ƒë√∫ng t√™n

const addReview = async (req, res) => {
    const { orderId } = req.params;
    const { rating, comment } = req.body;

    // Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa `orderId`
    if (!mongoose.Types.ObjectId.isValid(orderId)) {
        return res.status(400).json({ message: 'orderId kh√¥ng h·ª£p l·ªá' });
    }

    // Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa `rating`
    if (!rating || rating < 1 || rating > 5) {
        return res.status(400).json({ message: 'Rating ph·∫£i t·ª´ 1 ƒë·∫øn 5 sao' });
    }

    try {
        // T√¨m ƒë∆°n h√†ng theo `orderId`
        const order = await orderModel.findById(orderId); // S·ª≠ d·ª•ng ƒë√∫ng t√™n model
        if (!order) {
            return res.status(404).json({ message: 'Order kh√¥ng t·ªìn t·∫°i' });
        }

        // T·∫°o ƒë√°nh gi√° m·ªõi
        const newReview = {
            rating,
            comment,
            createdAt: new Date(),
        };

        // Th√™m ƒë√°nh gi√° v√†o m·∫£ng `reviews`
        order.reviews.push(newReview);

        // L∆∞u thay ƒë·ªïi v√†o c∆° s·ªü d·ªØ li·ªáu
        await order.save();

        res.status(201).json({
            message: 'Th√™m ƒë√°nh gi√° th√†nh c√¥ng',
            review: newReview,
        });
    } catch (error) {
        console.error('Error in addReview:', error); // Ghi log l·ªói ƒë·ªÉ debug
        res.status(500).json({
            message: 'L·ªói server',
            error: error.message,
        });
    }
};


const getAllReviews = async (req, res) => {
  try {
    const allReviews = await orderModel.aggregate([
      { $unwind: "$reviews" },
      {
        $project: {
          _id:       0,
          orderId:   "$_id",
          reviewId:  "$reviews._id",
          items:     1,
          firstName: "$address.firstName",
          lastName:  "$address.lastName",
          rating:    "$reviews.rating",
          comment:   "$reviews.comment",
          createdAt: "$reviews.createdAt",
          isHidden:  "$reviews.isHidden",
          replies:   "$reviews.replies"    // üëà Th√™m field replies
        }
      }
    ]);

    res.status(200).json({ success: true, reviews: allReviews });
  } catch (error) {
    console.error(error);
    res.status(500).json({ success: false, message: error.message });
  }
};


const hideReview = async (req, res) => {
  try {
    const { orderId, reviewId } = req.body;

    const order = await orderModel.findById(orderId);
    if (!order) {
      return res.json({ success: false, message: 'ƒê∆°n h√†ng kh√¥ng t·ªìn t·∫°i' });
    }

    const review = order.reviews.id(reviewId);
    if (!review) {
      return res.json({ success: false, message: 'Review kh√¥ng t·ªìn t·∫°i' });
    }

    review.isHidden = true;

    await order.save();

    res.json({ success: true, message: 'ƒê√£ ·∫©n review th√†nh c√¥ng' });
  } catch (error) {
    console.error(error);
    res.json({ success: false, message: 'L·ªói server' });
  }
};

const unhideReview = async (req, res) => {
    try {
        const { orderId, reviewId } = req.body;

        const order = await orderModel.findById(orderId);
        if (!order) {
            return res.json({ success: false, message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng" });
        }

        // T√¨m review c·∫ßn b·ªè ·∫©n
        const review = order.reviews.id(reviewId);
        if (!review) {
            return res.json({ success: false, message: "Kh√¥ng t√¨m th·∫•y review" });
        }

        review.isHidden = false;

        await order.save();
        res.json({ success: true, message: "B·ªè ·∫©n review th√†nh c√¥ng" });
    } catch (error) {
        console.error(error);
        res.json({ success: false, message: "L·ªói server khi b·ªè ·∫©n review" });
    }
};

const replyReview = async (req, res) => {
  const { orderId, reviewId } = req.params;
  const { replyText } = req.body;

  // Validate IDs
  if (!mongoose.Types.ObjectId.isValid(orderId) || !mongoose.Types.ObjectId.isValid(reviewId)) {
    return res.status(400).json({ success: false, message: 'orderId ho·∫∑c reviewId kh√¥ng h·ª£p l·ªá' });
  }
  if (!replyText || replyText.trim() === '') {
    return res.status(400).json({ success: false, message: 'replyText kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng' });
  }

  try {
    const order = await orderModel.findById(orderId);
    if (!order) {
      return res.status(404).json({ success: false, message: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng' });
    }

    const review = order.reviews.id(reviewId);
    if (!review) {
      return res.status(404).json({ success: false, message: 'Kh√¥ng t√¨m th·∫•y review' });
    }

    // Th√™m reply m·ªõi
    const newReply = { replyText };
    review.replies.push(newReply);

    await order.save();

    res.status(201).json({
      success: true,
      message: 'Tr·∫£ l·ªùi review th√†nh c√¥ng',
      reply: newReply
    });
  } catch (error) {
    console.error('Error in replyReview:', error);
    res.status(500).json({ success: false, message: 'L·ªói server', error: error.message });
  }
};

// controllers/reviewController.js

/**
 * ·∫®n m·ªôt reply (admin comment)
 * POST /orders/:orderId/reviews/:reviewId/replies/:replyId/hide
 */
const hideReply = async (req, res) => {
  const { orderId, reviewId, replyId } = req.params;

  // Validate IDs
  if (
    !mongoose.Types.ObjectId.isValid(orderId) ||
    !mongoose.Types.ObjectId.isValid(reviewId) ||
    !mongoose.Types.ObjectId.isValid(replyId)
  ) {
    return res.status(400).json({ success: false, message: 'ID kh√¥ng h·ª£p l·ªá' });
  }

  try {
    const order = await orderModel.findById(orderId);
    if (!order) return res.status(404).json({ success: false, message: 'ƒê∆°n h√†ng kh√¥ng t·ªìn t·∫°i' });

    const review = order.reviews.id(reviewId);
    if (!review) return res.status(404).json({ success: false, message: 'Review kh√¥ng t·ªìn t·∫°i' });

    const reply = review.replies.id(replyId);
    if (!reply) return res.status(404).json({ success: false, message: 'Reply kh√¥ng t·ªìn t·∫°i' });

    reply.isHidden = true;
    await order.save();

    res.json({ success: true, message: 'ƒê√£ ·∫©n reply th√†nh c√¥ng' });
  } catch (error) {
    console.error('Error in hideReply:', error);
    res.status(500).json({ success: false, message: 'L·ªói server' });
  }
};

/**
 * B·ªè ·∫©n m·ªôt reply (admin comment)
 * POST /orders/:orderId/reviews/:reviewId/replies/:replyId/unhide
 */
const unhideReply = async (req, res) => {
  const { orderId, reviewId, replyId } = req.params;

  // Validate IDs
  if (
    !mongoose.Types.ObjectId.isValid(orderId) ||
    !mongoose.Types.ObjectId.isValid(reviewId) ||
    !mongoose.Types.ObjectId.isValid(replyId)
  ) {
    return res.status(400).json({ success: false, message: 'ID kh√¥ng h·ª£p l·ªá' });
  }

  try {
    const order = await orderModel.findById(orderId);
    if (!order) return res.status(404).json({ success: false, message: 'ƒê∆°n h√†ng kh√¥ng t·ªìn t·∫°i' });

    const review = order.reviews.id(reviewId);
    if (!review) return res.status(404).json({ success: false, message: 'Review kh√¥ng t·ªìn t·∫°i' });

    const reply = review.replies.id(replyId);
    if (!reply) return res.status(404).json({ success: false, message: 'Reply kh√¥ng t·ªìn t·∫°i' });

    reply.isHidden = false;
    await order.save();

    res.json({ success: true, message: 'ƒê√£ b·ªè ·∫©n reply th√†nh c√¥ng' });
  } catch (error) {
    console.error('Error in unhideReply:', error);
    res.status(500).json({ success: false, message: 'L·ªói server' });
  }
};

export { addReview, getAllReviews, hideReview, unhideReview, replyReview, hideReply, unhideReply };

