import userModel from "../models/userModel.js"



const addToCart = async (req, res) => {
  try {
    const { userId, itemId } = req.body;

    const user = await userModel.findById(userId);
    if (!user) {
      return res.json({ success: false, message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i" });
    }

    let cartData = user.cartData || {};

    if (cartData[itemId.toString()]) {
      return res.json({ success: false, message: "S·∫£n ph·∫©m ƒë√£ c√≥ trong gi·ªè h√†ng" });
    }

    cartData[itemId.toString()] = 1;
    await userModel.findByIdAndUpdate(userId, { cartData });


    res.json({ success: true, message: "ƒê√£ th√™m v√†o gi·ªè h√†ng" });
  } catch (error) {
    console.error("L·ªói addToCart:", error);
    res.status(500).json({ success: false, message: "L·ªói server" });
  }
};


const updateCart = async (req, res) => {
  try {

    const { userId, itemId, quantity } = req.body

    const userData = await userModel.findById(userId)
    let cartData = await userData.cartData;

    cartData[itemId.toString()] = quantity;


    await userModel.findByIdAndUpdate(userId, { cartData })
    res.json({ success: true, message: "Cart Updated" })

  } catch (error) {
    console.log(error);
    res.json({ success: false, message: error.message })
  }
}


const getUserCart = async (req, res) => {
  try {
    const { userId } = req.body;

    const userData = await userModel.findById(userId);
    const originalCartData = userData.cartData || {};

    // ‚úÖ L·ªçc b·ªè nh·ªØng key c√≥ gi√° tr·ªã l√† null, undefined, NaN
    const filteredCartData = Object.fromEntries(
      Object.entries(originalCartData).filter(
        ([_, value]) => typeof value === 'number' && !isNaN(value)
      )
    );

    res.json({ success: true, cartData: filteredCartData });
  } catch (error) {
    console.log(error);
    res.json({ success: false, message: error.message });
  }
};


const removeFromCart = async (req, res) => {
  try {
    const { userId, itemId } = req.body;

    const user = await userModel.findById(userId);
    if (!user) {
      return res.json({ success: false, message: 'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i' });
    }

    const itemIdStr = itemId.toString();
    if (!(itemIdStr in cartData)) {
      return res.json({ success: false, message: 'S·∫£n ph·∫©m kh√¥ng c√≥ trong gi·ªè h√†ng' });
    }
    delete cartData[itemIdStr];


    // ‚úÖ Ghi ƒë√® l·∫°i cartData ho√†n ch·ªânh
    await userModel.findByIdAndUpdate(userId, { cartData });

    res.json({ success: true, message: '‚úÖ ƒê√£ xo√° s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng' });
  } catch (error) {
    console.error('L·ªói removeFromCart:', error);
    res.status(500).json({ success: false, message: 'L·ªói server' });
  }
};


const removeMultipleFromCart = async (req, res) => {
  try {
    const { userId, itemIds } = req.body;

    if (!itemIds || itemIds.length === 0) {
      return res.json({ success: false, message: 'Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o ƒë·ªÉ xo√°' });
    }

    const user = await userModel.findById(userId);

    if (!user || !user.cartData) {
      return res.json({ success: false, message: 'User kh√¥ng t·ªìn t·∫°i ho·∫∑c ch∆∞a c√≥ cart' });
    }

    const newCartData = { ...user.cartData };

    // üîç Log debug
    console.log("üîç Keys trong cartData:", Object.keys(newCartData));
    console.log("üîç itemIds c·∫ßn xo√°:", itemIds.map(id => id.toString()));

    itemIds.forEach(id => {
      delete newCartData[id.toString()];
    });

    user.cartData = newCartData;
    await user.save();

    res.json({ success: true, message: 'ƒê√£ xo√° c√°c s·∫£n ph·∫©m ƒë√£ thanh to√°n kh·ªèi gi·ªè h√†ng' });
  } catch (err) {
    console.error(err);
    res.json({ success: false, message: 'L·ªói server khi xo√° nhi·ªÅu s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng' });
  }
};







export { addToCart, updateCart, getUserCart, removeFromCart, removeMultipleFromCart }